function foo(arg1 = "我是默认值", arg2, ...args) {
    // 两种不严谨的写法，如果传0，也是默认值，不严谨
    // arg1 = arg1 ? arg1 : "我是默认值"
    // arg1 = arg1 || 我是默认值

    // 严谨的写法
    // arg1 = (arg1 == undefined || arg1 == null) ? "我是默认值" : arg1

    // es6新增，空值合并运算符??
    // arg1 = arg1 ?? "我是默认值"

    /* 
        ES6新增，函数默认参数，不过不会对null进行判断
        另外有默认参数的形参最好写到没有默认参数的形参之后（虽然js不会报错）
        如果有默认参数的形参写在后面，并且向用默认值的话，在调用的时候直接不写就可以，而如果写在前面的话，就不好不写
        function baz(a = 1, b) { // 如果我们想使用a的默认值，b自己传值，那么a在前面，想要给b传值，由于实参和形参是从前往一一对应的，调用的时候不能省略a，而如下是会报错的
            console.log(, b); // 这样会报错，如果写undefined又会不合理
        }

        另外，有默认参数的形参（以及其后面没有默认参数的参数），不会计算在函数的length中，因此有默认参数的形参最好写在后面

        剩余参数和有默认参数的形参谁放到更后面呢？剩余参数，否则报错
    */

    console.log(arg1, arg2);
}

foo(0)
foo(null)
foo(undefined)
foo("")
foo({})
foo(1)

// 有默认参数的形参（以及其后面的参数），不会计算在函数的length中
console.log(foo.length); // 0


