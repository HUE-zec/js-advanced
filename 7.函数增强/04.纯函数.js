/* 
  首先，让我们先来理解一个概念：纯函数
    纯函数是函数式编程中一个非常重要的概念，js符合函数式编程的范式，所以也有纯函数的概念
    react开发中纯函数运用非常广泛
      react中组件就被要求像是一个纯函数（为什么是像，因为还有class组件），redux中有一个reducer的概念，也是要求其必须是一个纯函数
    掌握纯函数对于理解很多框架的设计是非常有帮助的

    纯函数的维基百科定义：
      在程序设计中，若一个函数符合以下条件则被称为纯函数：
        此函数在相同的输入值时，需产生相同的输出
        函数的输出和输入值和输入输出以外的其他隐藏信息或状态无关，也和由I/O设备产生的外部输出无关
        该函数不能有语义上可观察的函数副作用，诸如“触发事件”，使输出设备输出，或更改输出值以外物件的内容
*/

// 此函数在相同的输入值时，需产生相同的输出
// 这样是满足的
function sum (a, b) {
  return a + b;
}
sum(10, 20)
sum(10, 20)
// 如下这样就不满足第一个条件了，相同的输入产生了不同的结果
var c = 10; // 这里（全局）和函数会产生闭包
function sum (a, b) {
  return a + b + c;
}
console.log(sum(1, 2)); // 13
c = 20;
console.log(sum(1, 2)); // 23
// 那么也就是说纯函数不能使用闭包

// 简单总结一下，纯函数要求：确定的输入一定会产生确定的输出；函数在执行的过程中，不能产生副作用

// 那么问题来了，什么是函数的副作用呢？
// 表示在执行一个函数的时候，除了返回函数值之外，还对调用函数产生了附加的影响，比如修改了全局变量，修改参数或者改变外部的存储


// 纯函数的案例：
// slice()是一个纯函数  splice()不是一个纯函数

// 纯函数的优势：可以安心编写和使用；在写的时候就保证了函数的纯度，只是单纯实现自己的业务逻辑代码，而不需要关心传入的内容是如何获得或者依赖的外部变量是否已经发生了改变;用的时候，确定自己的输入内容不会被任意篡改，确定的输入一定会有唯一确定的输出